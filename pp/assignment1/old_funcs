#lang racket

;; music element
;;   - Note (pitchvalue, duration, instrument)
;;   - pause (duration)
;;   - sequentialMusicElement (musicElements)
;;   - parallelMusicElement (musicElements)

;; pitchvalue: int between 0 and 127
;; duration: timeunit where 960 is a second
;; instruments: Piano, Organ, Guitar, Violin, Flute, Trumpet, Helicopter, Telephone

;abs-time:	A non-negative integer, in time ticks. The absolute start time of the note.
;channel:	An integer between 1 and 16. The MIDI channel allocated to the requested instrument. Se the miniproject formulation for more details.
;note-number:	An integer between 0 and 127. The MIDI note number.
;velocity:	An integer between 0 and 127. The velocity (strength) of the note. Not controllable in this exercise. It can be a constant, such as 80.
;duration:	A non-negative integer. The duration of this note (a number of time ticks).

(define (music-element-walk basecase notef pausef seqf parf listf)
  (lambda (me)
    (cond ((eqv? me '()) basecase)
          ((note? me) (notef me)) ;transform to note-abs
          ((pause? me) (pausef me)) ;get duration somehow
          ((seq? me) (seqf me)) ;call recursively on all elements
          ((par? me) (parf))
          (listfunc me))))

(define (get-music-dur-listfunc func me)
  (if (par? (head me)) (max (func (head me)) (func (tail me)))
      (+ (func (head me)) (func (tail me)))))
