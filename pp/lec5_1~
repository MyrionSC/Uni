#lang racket

(define (tag label thunk) (cons label thunk))

(define (call thunk) (thunk))
(define (tag label thing) (cons label thing))
(define tag-of car)
(define tag-value cdr)
(define (return x) (tag 'done x))
(define (bounce x) (tag 'doing x))
(define (sum lst res) (if (null? lst) (return res) (bounce (lambda () (sum (cdr lst) (+ (car lst) res))))))

(define (seesaw thread-1 thread-2)
  (cond ((eqv? 'done (tag-of thread-1))
         (tag-value thread-1))
        ((eqv? 'doing (tag-of thread-1))
         (seesaw thread-2 (call (tag-value thread-1))))))